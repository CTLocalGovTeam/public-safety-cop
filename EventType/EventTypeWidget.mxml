<?xml version="1.0" encoding="utf-8"?>
<viewer:BaseWidget xmlns:fx="http://ns.adobe.com/mxml/2009"
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:viewer="com.esri.viewer.*"

				   widgetConfigLoaded="widgetConfigLoadedHandler()"  creationComplete="basewidget1_creationCompleteHandler(event)"
				   xmlns:tree="widgets.EventType.components.*"
				   >

	<viewer:states>
		<s:State name="normal"/>
		<s:State name="noBasemaps"/>
	</viewer:states>

	<fx:Script>
		<![CDATA[
			import com.esri.ags.events.FeatureLayerEvent;
			import com.esri.ags.events.GeometryServiceEvent;
			import com.esri.ags.events.LayerEvent;
			import com.esri.ags.geometry.Extent;
			import com.esri.ags.geometry.Multipoint;
			import com.esri.ags.geometry.WebMercatorExtent;
			import com.esri.ags.layers.ArcGISDynamicMapServiceLayer;
			import com.esri.ags.layers.ArcGISTiledMapServiceLayer;
			import com.esri.ags.layers.FeatureLayer;
			import com.esri.ags.tasks.GeometryService;
			import com.esri.ags.tasks.GeometryServiceSingleton;
			import com.esri.ags.tasks.JSONTask;
			import com.esri.ags.tasks.supportClasses.ProjectParameters;
			import com.esri.ags.utils.WebMercatorUtil;
			import com.esri.viewer.AppEvent;
			import com.esri.viewer.ErrorMessage;
			import com.esri.viewer.ViewerContainer;
			import com.esri.viewer.utils.Hashtable;

			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.core.mx_internal;
			import mx.events.CollectionEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.events.TreeEvent;
			import mx.rpc.AsyncResponder;
			import mx.rpc.Fault;

			import widgets.EventType.event.COPEvent;
			import widgets.EventType.vo.treeVo;
			import widgets.Geoprocessing.supportClasses.FeatureInputParamEvent;

			public var LayerArr:ArrayCollection= new ArrayCollection();

			[bindable]public  var layerDeatils:XMLList= new XMLList();
			private var requestsCount:Array=new Array();
			private var totalCount:Number=1;
			private var eventQueryStringHash:Hashtable= new Hashtable();
			public var arrtrueConfigXmls:Hashtable=new Hashtable();
			private var projParams:ProjectParameters;

			[Bindable]
			private var msgVisible:Boolean = false;

			private var layerInfos:Array;
			private var geometryService:GeometryService;

			[bindable] private var title:String;

			private var arrExtent:Array= new Array();
			private var arrRequestCount:Number=0;
			private function widgetConfigLoadedHandler():void
			{
				try
				{
					arrExtent= new Array();
					var urlConfigParams:Array= new Array();
					//"config=config.xml&e=1"
					var queryStringFromUrl:String =ExternalInterface.call("window.location.search.substring", 1);
					title=configXML.title.toString();
					titletxt.text=title;
					if (queryStringFromUrl)
					{
						var params:Array = queryStringFromUrl.split('&');
						if(params.length>1)
						{
							var eventArr:Array = (params[1] as String).substring(2).split(',');
							var tempObj:Object;
							for(var i:Number=0;i<eventArr.length;i++)
							{
								tempObj=new Object();
								tempObj.val=true;
								eventQueryStringHash.add(eventArr[i],tempObj);
							}
						}
					}

					geometryService= new GeometryService()
					geometryService.method= URLRequestMethod.POST;
					geometryService.url = configData.geometryService.url;
					geometryService.addEventListener(GeometryServiceEvent.PROJECT_COMPLETE,geometryService_projectCompleteHandler);


					if (configXML)
					{
						layerDeatils= configXML.layers.layergrpup;
						var objXMlList:XMLList;
						var tokenObject:Object;
						var index1:Number=0;
						var index2:Number=0;
						var i2:Number=0;
						for each (var node:XML in layerDeatils)
						{
							objXMlList= new XMLList();
							objXMlList=node.layer;
							index2=0;
							var templeaf:XML=leaf as XML;
							var objQ:Object
							i2++;
							trace('======================='+i2);
							if(eventQueryStringHash.size>0)
							{
								objQ=eventQueryStringHash.find(node.@id.toString());
								if(objQ !=null)
									configXML.layers.layergrpup[index1].@['state']='checked';

							}


							for each(var leaf:XML in objXMlList)
							{

								if(objQ !=null)
								{
									configXML.layers.layergrpup[index1].layer[index2].@['state']='checked';

								}
								index2++;
								if(leaf.@allIds[0].toString() == 'true')
								{
									trace(node.@id.toString())
									requestsCount.push(node.@id.toString());
									tokenObject= new Object();
									tokenObject.id=node.@id.toString();;
									tokenObject.name=leaf.@label[0].toString();
									tokenObject.url=leaf.@url[0].toString();
									tokenObject.type=leaf.@type[0].toString();
									if(objQ !=null)
									{
										tokenObject.state='checked'
									}
									else
										tokenObject.state='unchecked'

									trace(leaf.@url[0].toString());
									setJSONRequest(leaf.@url[0].toString(),tokenObject);
									arrtrueConfigXmls.add(tokenObject.id,leaf);
								}


								/***********************Add layers on Map ***************************/
								switch(leaf.@type[0].toString())
								{
									case "dynamic":
									{

										var dynLayer:ArcGISDynamicMapServiceLayer = new ArcGISDynamicMapServiceLayer(leaf.@url[0].toString());
										dynLayer.alpha = 1;
										dynLayer.id = leaf.@label[0].toString();
										dynLayer.name = leaf.@label[0].toString();
										map.addLayer(dynLayer);
										if(objQ !=null)
										{

											dynLayer.visible = true;
											dynLayer.addEventListener(LayerEvent.LOAD,OndynamicLoad)
											}
										else
											dynLayer.visible = false;

										map.addLayer(dynLayer);

										function OndynamicLoad(e:LayerEvent):void{

											var d:ArcGISDynamicMapServiceLayer= e.layer as ArcGISDynamicMapServiceLayer;
											//map.extent = map.extent.union(d.initialExtent);
										}



										break;
									}
									case "feature":
									{

										var featureLayer:FeatureLayer = new FeatureLayer(leaf.@url[0].toString());
										featureLayer.alpha = 1;
										featureLayer.id = leaf.@label[0].toString();;
										trace(featureLayer.id);
										featureLayer.name = leaf.@label[0].toString();
										featureLayer.outFields = [ '*' ];
										featureLayer.mode = FeatureLayer.MODE_SNAPSHOT;
										featureLayer.visible=false;



										if(objQ !=null)
										{
											featureLayer.visible = true;
											featureLayer.addEventListener(LayerEvent.LOAD,loadSuccessHandler);
										}
										else
											featureLayer.visible = false;

										map.addLayer(featureLayer);



										function loadSuccessHandler(event:LayerEvent):void
										{
											if(featureLayer.initialExtent.spatialReference.wkid!=map.spatialReference.wkid)
											{
												arrRequestCount++;

												projParams = new ProjectParameters();
												projParams.geometries = [featureLayer.initialExtent];
												projParams.outSpatialReference = map.extent.spatialReference;
												geometryService.project(projParams);
											}
											else
											{
												//map.extent = map.extent.union(featureLayer.initialExtent);

											}
										}




										break;
										}

									}

								}
								index1++;
							}

						}
						else
						{
							Alert.show('Config not found');
						}
					}
					catch(e:Error)
					{
						trace('Some Error has ocured' + i2)
						resetTree(i2);
					}
				}


					private function resetTree(index:Number):void
					{
						try
						{
						var node:XML=new XML();
						var objXMlList:XMLList;
						var tokenObject:Object;
						var index1:Number=0;
						var index2:Number=0;
						for(var j:Number=index;j<layerDeatils.length();j++)
						{
							node=layerDeatils[j] as XML;
							objXMlList= new XMLList();
							objXMlList=node.layer;
							index2=0;
							var templeaf:XML=leaf as XML;
							var objQ:Object

							trace('======================='+j+'=='+node.@id);
							/* if(eventQueryStringHash.size>0)
							{
								objQ=eventQueryStringHash.find(node.@id.toString());
								if(objQ !=null)
									configXML.layers.layergrpup[j-1].@['state']='checked';

							} */
							for each(var leaf:XML in objXMlList)
							{
								/* if(objQ !=null)
								{
									configXML.layers.layergrpup[j-1].layer[index2].@['state']='checked';

								} */
								index2++;
								if(leaf.@allIds[0].toString() == 'true')
								{
									trace(node.@id.toString())
									requestsCount.push(node.@id.toString());
									tokenObject= new Object();
									tokenObject.id=node.@id.toString();;
									tokenObject.name=leaf.@label[0].toString();
									tokenObject.url=leaf.@url[0].toString();
									tokenObject.type=leaf.@type[0].toString();
									if(objQ !=null)
									{
										tokenObject.state='checked'
									}
									else
										tokenObject.state='unchecked'

									trace(leaf.@url[0].toString());
									setJSONRequest(leaf.@url[0].toString(),tokenObject);
									arrtrueConfigXmls.add(tokenObject.id,leaf);
								}


								/***********************Add layers on Map ***************************/
								switch(leaf.@type[0].toString())
								{
									case "dynamic":
									{

										var dynLayer:ArcGISDynamicMapServiceLayer = new ArcGISDynamicMapServiceLayer(leaf.@url[0].toString());
										dynLayer.alpha = 1;
										dynLayer.id = leaf.@label[0].toString();
										dynLayer.name = leaf.@label[0].toString();

										if(objQ !=null)
										{

											dynLayer.visible = true;
											dynLayer.addEventListener(LayerEvent.LOAD,OndynamicLoad)


										}
										else
											dynLayer.visible = false;

										map.addLayer(dynLayer);

										function OndynamicLoad(e:LayerEvent):void{

											var d:ArcGISDynamicMapServiceLayer= e.layer as ArcGISDynamicMapServiceLayer;
											//map.extent = map.extent.union(d.initialExtent);
										}

										break;
									}
									case "feature":
									{

										var featureLayer:FeatureLayer = new FeatureLayer(leaf.@url[0].toString());
										featureLayer.alpha = 1;
										featureLayer.id = leaf.@label[0].toString();;
										trace(featureLayer.id);
										featureLayer.name = leaf.@label[0].toString();
										featureLayer.outFields = [ '*' ];
										featureLayer.mode = FeatureLayer.MODE_SNAPSHOT;
										featureLayer.visible=false;



										if(objQ !=null)
										{
											featureLayer.visible = true;
											featureLayer.addEventListener(LayerEvent.LOAD,loadSuccessHandler1);
										}
										else
											featureLayer.visible = false;

										map.addLayer(featureLayer);



										function loadSuccessHandler1(event:LayerEvent):void
										{
											if(featureLayer.initialExtent.spatialReference.wkid!=map.spatialReference.wkid)
											{
												arrRequestCount++;

												projParams = new ProjectParameters();
												projParams.geometries = [featureLayer.initialExtent];
												projParams.outSpatialReference = map.extent.spatialReference;
												geometryService.project(projParams);

											}
											else
											{
												//map.extent = map.extent.union(featureLayer.initialExtent);

											}
										}
										break;
										}
									}
								}
							}
							}
							catch(e:Error)
							{
								trace('error');
							}

					}


					private function setJSONRequest(url:String,token:Object):void
					{
						var jsonReq:JSONTask = new JSONTask();
						var urlVars:URLVariables = new URLVariables();
						urlVars.f = "json";
						urlVars.json='true'
						jsonReq.url = url;

						jsonReq.execute(urlVars, new AsyncResponder(json_resultHandler, json_faultHandler,token));
					}

					private function json_resultHandler(result:Object, token:Object = null):void
					{

						trace(token.id+':'+token.name);
						var n:Number=Number(token.id);
						var objQ:Object=new Object();
						if(eventQueryStringHash.size>0)
						{
							objQ=eventQueryStringHash.find(token.id);
							if(objQ !=null)
							{
								configXML.layers.layergrpup[n-1].@['state']='checked';
								configXML.layers.layergrpup[n-1].layer[0].@['state']='checked';
							}
						}


						var leafObj:XML= arrtrueConfigXmls.find(token.id) as XML;
						var resultArr:Array = result.layers;
						for (var i:Number=0;i<resultArr.length;i++)
						{
							var xmls:XML= new XML('<layer></layer>');
							xmls.@['id']=resultArr[i].id;
							xmls.@['label']=resultArr[i].name;
							xmls.@['type']=token.type
							xmls.@['rootId']=token.name
							xmls.@['url']=token.url+'/'+resultArr[i].id
							if(objQ !=null)
							{
								xmls.@['state']='checked';
							}
							else
							{
								xmls.@['state']='unchecked';
							}
							leafObj.appendChild(xmls)
							configXML.insertChildAfter(arrtrueConfigXmls.find(token.id) as XML,leafObj)


							switch(token.type)
							{
								case "feature":
								{
									var featureLayer:FeatureLayer = new FeatureLayer(token.url+'/'+resultArr[i].id);
									featureLayer.alpha = 1;
									featureLayer.id = resultArr[i].name;
									featureLayer.name = resultArr[i].name;
									featureLayer.outFields = [ '*' ];
									featureLayer.mode = FeatureLayer.MODE_SNAPSHOT;
									featureLayer.visible = false;
									if(token.state=='checked')
									{
										featureLayer.visible = true;

										if(featureLayer.initialExtent.spatialReference.wkid!=map.spatialReference.wkid)
										{
											projParams = new ProjectParameters();
											projParams.geometries = [featureLayer.initialExtent];
											projParams.outSpatialReference = map.extent.spatialReference;
											geometryService.project(projParams);
										}
										else
										{
											//map.extent=featureLayer.initialExtent;
											//map.extent = map.extent.union(featureLayer.initialExtent);
										}
									}
									else
										featureLayer.visible = false;

									map.addLayer(featureLayer);
									break;
								}

							}
						}
						if(totalCount==requestsCount.length)
						{
							setDataSetTree();
						}
						else
							totalCount++;
					}

					private function json_faultHandler(fault:Fault, token:Object = null):void
					{
						if(totalCount==requestsCount.length)
						{
							setDataSetTree();
						}
						else
							totalCount++;

						//trace("JSON FAULT:" + token.tokenName.toString());

					}



					private function setDataSetTree():void
					{
						layerDeatils=configXML.layers.layergrpup;
						msgVisible=true;

						trPermissions.dataProvider=layerDeatils;
					}

					private function basewidget1_creationCompleteHandler(event:FlexEvent):void
					{
						addListeners();

					}

					private function  addListeners():void
					{
						AppEvent.addListener(COPEvent.SET_LAYER_VISIBLE_ON_OFF,setLayerVisible);
					}
					private function setLayerVisible(e:COPEvent):void
					{
						try
						{
							arrExtent= new Array();
							var dataObj:Object= e.data;
							var arrIds:Array=dataObj.layerdata;
							var objData:Object;
							if(arrIds.length >0 )
							{
								for(var i:Number=0; i<arrIds.length;i++)
								{
									objData=arrIds[i]

									switch(objData.type)
									{
										case 'dynamic':
											if(map.getLayer(objData.rootId)!=null)
											{

												var dynlayer:ArcGISDynamicMapServiceLayer=map.getLayer(objData.rootId) as ArcGISDynamicMapServiceLayer;

												if(objData.isVisible== "checked"){
													dynlayer.visible=true;
													dynlayer.visibleLayers=objData.leafId as ArrayCollection;

													map.extent = dynlayer.initialExtent;
												}
												else
												{
													var index:String;
													//dynlayer.visible=true;
													var arrleafs:ArrayCollection=objData.leafId as ArrayCollection
													for(var i3:Number=0;i3<arrleafs.length;i3++)
													{
														index = arrleafs.getItemAt(i3).toString();

														var nameIndex:int = dynlayer.visibleLayers.getItemIndex(index);
														if(nameIndex==-1)
															nameIndex=dynlayer.visibleLayers.getItemIndex(Number(index));
														if (nameIndex != -1)
														{
															dynlayer.visibleLayers.removeItemAt(nameIndex);
														}

													}
												}


											}

											break;
										case 'feature':
											if(map.getLayer(objData.leafId)!=null)
											{
												if(objData.isVisible == "checked")
												{
													map.getLayer(objData.leafId).visible=true;
													var f:FeatureLayer=map.getLayer(objData.leafId) as FeatureLayer;

													if(f.initialExtent.spatialReference.wkid!=map.spatialReference.wkid)
													{
														projParams = new ProjectParameters();
														projParams.geometries = [f.initialExtent];
														projParams.outSpatialReference = map.extent.spatialReference;
														geometryService.project(projParams);
													}
													else
													{

														map.extent =f.initialExtent;
													}


												}
												else
													map.getLayer(objData.leafId).visible=false;
											}

											break;

										case '' :
											//When parent is selected
											if(objData.rootId!=null)
											{

												var index2:String;
												var arrleafs2:ArrayCollection =(objData.leafId as ArrayCollection);
												var obj:Object;
												for(var i4:Number=0;i4<arrleafs2.length;i4++)
												{
													obj=arrleafs2.getItemAt(i4) as Object;

													switch(obj.type)
													{
														case 'feature' :
															if(objData.isVisible == "checked")
															{
																map.getLayer(obj.id).visible=true;

																var f2:FeatureLayer=map.getLayer(obj.id) as FeatureLayer;
																if(f2.initialExtent.spatialReference.wkid!=map.spatialReference.wkid)
																{
																	projParams = new ProjectParameters();
																	projParams.geometries = [f2.initialExtent];
																	projParams.outSpatialReference = map.extent.spatialReference;
																	geometryService.project(projParams);
																}
																else
																{
																	//map.extent = map.extent.union(f2.initialExtent);


																}
															}
															else
															{
																map.getLayer(obj.id).visible=false;
															}

															break;
														case 'dynamic' :

															var dynlayer2:ArcGISDynamicMapServiceLayer=map.getLayer(objData.rootId) as ArcGISDynamicMapServiceLayer;
															if(objData.isVisible == "checked")
															{
																dynlayer2.visible=true;
																dynlayer2.visibleLayers=objData.leafIdsIds as ArrayCollection;
																//map.extent = map.extent.union(dynlayer2.initialExtent);
															}
															else
															{
																var index3:String;
																dynlayer2.visible=false;
																var arrleafs3:ArrayCollection=objData.leafIdsIds as ArrayCollection
																for(var i5:Number=0;i5<arrleafs3.length;i5++)
																{
																	index3 = arrleafs3.getItemAt(i5).toString();

																	var nameIndex2:int = dynlayer2.visibleLayers.getItemIndex(index3);
																	if(nameIndex2==-1)
																		nameIndex2=dynlayer2.visibleLayers.getItemIndex(Number(index3));
																	if (nameIndex2 != -1)
																	{
																		dynlayer2.visibleLayers.removeItemAt(nameIndex2);
																	}

																}
															}
															AppEvent.dispatch(AppEvent.TOC_HIDDEN);
															break;
													}
												}


											}
											break;


									}


								}
							}
						}
						catch(error:Error)
						{
							trace("<Error> " + error.message);

						}

					}

					private var completedRequest:Number=0;
					private function geometryService_projectCompleteHandler(event:GeometryServiceEvent):void
					{

						//map.extent = map.extent.union((event.result as Array)[0] as Extent);

					}

					private function getExcludeLayers():ArrayCollection
					{
						var excludeLayers:ArrayCollection = new ArrayCollection();

						if (configData && configData.basemaps)
						{
							// exclude basemaps
							for (var i:int = 0; i < configData.basemaps.length; i++)
							{
								excludeLayers.addItem(configData.basemaps[i].label);
							}
						}
						return excludeLayers;
					}


					private function onLoad(e:LayerEvent):void
					{

						var dynlayer:ArcGISDynamicMapServiceLayer=e.layer as ArcGISDynamicMapServiceLayer;

					}






					protected function wTemplate_openHandler(event:Event):void
					{
						trPermissions.selectedIndex=-1;

					}

		]]>
	</fx:Script>


	<viewer:WidgetTemplate id="wTemplate" minHeight="300" minWidth="390"
						   width="390" height="300"  open="wTemplate_openHandler(event)"
						   >



		<s:Spacer  height="10" />


		<s:HGroup id="boxMessage2" visible="{!msgVisible}" includeInLayout="{!msgVisible}" width="100%">
			<mx:SWFLoader id="swfMessage2" source="assets/images/loader.swf" visible="false" />
			<s:Label id="txtMessage2" text="Loading layers....." width="90%"/>
		</s:HGroup>

		<s:VGroup width="100%" gap="10">


			<mx:Label id='titletxt' width="100%" visible="{msgVisible}"  />

			<mx:Tree id="trPermissions"
					 itemRenderer="widgets.EventType.renderer.TreeItemRenderer1"
					 showRoot="false"
					 paddingTop="5"
					 labelField="@label"
					 height="100%"
					 width="100%"
					 rollOverColor="{getStyle('contentBackgroundColor')}"
					 folderClosedIcon="{null}"
					 folderOpenIcon="{null}"
					 defaultLeafIcon="{null}"
					 mouseEnabled="false"
					 borderStyle="none"
					 verticalScrollPolicy="auto" />
		</s:VGroup>
	</viewer:WidgetTemplate>
</viewer:BaseWidget>
