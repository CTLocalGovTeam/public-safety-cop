<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
// Copyright (c) 2008-2011 Esri
//
// All rights reserved under the copyright laws of the United States
// and applicable international laws, treaties, and conventions.
//
// You may freely redistribute and use this software, with or
// without modification, provided you include the original copyright
// and use restrictions.  See use restrictions in the file:
// License.txt and/or use_restrictions.txt.
//
////////////////////////////////////////////////////////////////////////////////
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:mx="library://ns.adobe.com/flex/mx"
         xmlns:esri="http://www.esri.com/2008/ags"
         xmlns:esri_stl="com.esri.stl.components.*"
         width="100%" height="100%"
         creationComplete="creationCompleteHandler(event)"
         currentState="{_presenter.currentState}"
         preinitialize="preinitializeHandler(event)">
    <!-- BINDING METADATA -->
    <fx:Binding destination="_presenter.filterKeywordText"
                source="filterKeyword.text"
                twoWay="true"/>
    <fx:Binding destination="_presenter.filterSelectedItem" source="filterFieldDropDownList.selectedItem"/>
    <!-- STATES AND TRANSITIONS -->
    <s:states>
        <s:State name="mainState"/>
        <s:State name="mainWithMessageState"/>
        <s:State name="mainWithErrorState"/>
    </s:states>
    <s:transitions>
        <s:Transition autoReverse="true"
                      fromState="*"
                      toState="mainWithErrorState">
            <s:Sequence id="inTransitionErrorMessage">
                <s:AddAction startDelay="100" target="{errorMessage}"/>
                <s:SetAction property="alpha"
                             target="{errorMessage}"
                             value="0"/>
                <s:Fade alphaFrom="0"
                        alphaTo="1"
                        duration="1000"
                        target="{errorMessage}"/>
            </s:Sequence>
        </s:Transition>
        <s:Transition autoReverse="true"
                      fromState="mainWithErrorState"
                      toState="*">
            <s:Fade alphaFrom="1"
                    alphaTo="0"
                    duration="750"
                    target="{errorMessage}"/>
        </s:Transition>
    </s:transitions>
    <s:layout>
        <s:VerticalLayout gap="15"
                          horizontalAlign="center"
                          verticalAlign="top"/>
    </s:layout>
    <fx:Style>
	@namespace s "library://ns.adobe.com/flex/spark";
	@namespace mx "library://ns.adobe.com/flex/mx";
	@namespace esri "http://www.esri.com/2008/ags";
	@namespace esri_stl "http://www.esri.com/2010/stl";
	.checkBoxHeaderStyle
	{
		color: #CECECE;
	}
</fx:Style>
    <fx:Script>
        <![CDATA[
            import com.esri.stl.AssetManager;

            import mx.binding.utils.ChangeWatcher;
            import mx.collections.ArrayList;
            import mx.events.FlexEvent;

            import widgets.TrackingPlayback.model.AppModel;
            import widgets.TrackingPlayback.presenter.PlaybackPresenter;

            [Bindable]
            private var _presenter:PlaybackPresenter;
            private var _watcherStart:ChangeWatcher;
            private var _watcherEnd:ChangeWatcher;


            protected function preinitializeHandler(event:FlexEvent):void
            {
                _presenter = AppModel.getInstance().playbackPresenter;
            }

            protected function creationCompleteHandler(event:FlexEvent):void
            {
                dateTimeChangedHandler(null);
                _watcherStart = ChangeWatcher.watch(dtcStart, "selectedDateTime", dateTimeChangedHandler);
                _watcherEnd = ChangeWatcher.watch(dtcEnd, "selectedDateTime", dateTimeChangedHandler);

            }

            protected function dateTimeChangedHandler(event:Event):void
            {
                timeSlider.createTimeStopsByTimeInterval(_presenter.timeExtent, _presenter.timeInterval, _presenter.timeIntervalUnits);
            }
        ]]>
    </fx:Script>
    <fx:Declarations>
        <!-- Place non-visual elements (e.g., services, value objects) here -->

    </fx:Declarations>
    <!-- VISUAL FEEDBACK FOR MESSAGES AND ERRORS -->
    <s:Label id="errorMessage"
             width="100%"
             color="0xFF0000"
             fontWeight="bold"
             includeIn="mainWithErrorState"
             text="{_presenter.errorMessage}"/>
    <s:HGroup id="message"
              width="100%"
              includeIn="mainWithMessageState">
        <mx:Image id="swfMessage" source="{AssetManager.ASSET_PROGRESS_LOADER}"/>
        <s:Label width="90%"
                 fontWeight="bold"
                 text="{_presenter.message}"/>
    </s:HGroup>
    <!-- MAIN FORM COMPONENT, ALWAYS VISIBLE -->
    <s:VGroup width="100%" height="100%"
              gap="15"
              includeIn="mainState,mainWithErrorState,mainWithMessageState">
        <s:VGroup width="100%" gap="15">
            <s:HGroup width="100%" verticalAlign="middle">
                <s:Label color="0xFFFFFF" text="Look for"/>
                <s:TextInput id="filterKeyword" focusIn="_presenter.focusInHandler(event)"/>
                <s:Label color="0xFFFFFF" text="in"/>
                <s:DropDownList id="filterFieldDropDownList"
                                color="{getStyle('color')}"
                                dataProvider="{new ArrayList(_presenter.filterFields)}"
                                prompt="Field"
                                requireSelection="true"
                                selectedIndex="0"/>
            </s:HGroup>
            <s:HGroup width="100%">
                <s:ToggleButton id="selectionToggleButton"
                                width="25%"
                                change="_presenter.toggleSelection(event,selectionToggleButton.selected)"
                                chromeColor="{getStyle('chromeColor')}"
                                color="0xFFFFFF"
                                enabled="{!_presenter.timeSliderIsPlaying}"
                                fontWeight="{selectionToggleButton.selected ? 'normal' : 'bold'}"
                                label="{selectionToggleButton.selected ? 'Select All' : 'Select None'}"
                                selected="false"/>
                <s:Button width="25%"
                          chromeColor="{getStyle('chromeColor')}"
                          click="_presenter.resetButton_clickHandler(event)"
                          color="0xFFFFFF"
                          enabled="{!_presenter.timeSliderIsPlaying}"
                          label="Clear Filter"/>
                <s:Button width="25%"
                          chromeColor="{getStyle('chromeColor')}"
                          click="_presenter.filterButton_clickHandler(event)"
                          color="0xFFFFFF"
                          enabled="{!_presenter.timeSliderIsPlaying}"
                          label="Filter"/>

            </s:HGroup>
        </s:VGroup>
        <esri_stl:CheckBoxDataGrid id="dataGrid"
                                   width="100%" height="80%"
                                   alternatingItemColors="{[getStyle('textColor'),getStyle('chromeColor')]}"
                                   checkBoxSelectionChanged="_presenter.checkBoxSelectionChangeHandler(event)"
                                   color="{getStyle('color')}"
                                   columns="{_presenter.dataGridColumns}"
                                   dataProvider="{_presenter.dataProvider}"
                                   enabled="{!_presenter.timeSliderIsPlaying}"
                                   fontFamily="{getStyle('fontFamily')}"
                                   headerBackgroundSkin="com.esri.stl.skins.CheckBoxDataGridHeaderBackgroundSkin"
                                   headerRelease="{_presenter.headerReleaseEventHandler(event)}"
                                   headerStyleName="checkBoxHeaderStyle"
                                   rollOverColor="{getStyle('tableRollOverColor')}"
                                   selectionColor="{getStyle('tableSelectedColor')}"
                                   textRollOverColor="{getStyle('tableRollOverTextColor')}"
                                   textSelectedColor="{getStyle('tableSelectedTextColor')}"
                                   visible="{_presenter.dataProvider.length > 0}"/>
        <s:HGroup width="100%">
            <s:Group>
                <s:BorderContainer width="178" height="77"
                                   backgroundColor="{getStyle('chromeColor')}"
                                   cornerRadius="10">
                    <!-- backgroundColor="{getStyle('playbackViewStartColor')}" -->
                    <s:borderStroke>
                        <s:SolidColorStroke color="0xFFFFFF" weight="2"/>
                    </s:borderStroke>
                    <esri_stl:DateTimeChooser id="dtcStart"
                                              left="10" top="10"
                                              dateRange="{_presenter.dateRange}"
                                              dateTimeChange="_presenter.dtcStart_DateTimeChangedHandler(event)"
                                              direction="vertical"
                                              enabled="{!_presenter.timeSliderIsPlaying}"
                                              is24Hour="false"
                                              selectedDateTime="{_presenter.startDateTime}"
                                              showTime="true"/>
                </s:BorderContainer>
                <s:Line width="{startlbl.width}" left="10">
                    <s:stroke>
                        <s:SolidColorStroke color="{getStyle('chromeColor')}" weight="3"/>
                        <!-- color="{getStyle('playbackViewStartColor')}" -->
                    </s:stroke>
                </s:Line>
                <s:Label id="startlbl"
                         left="12" top="-5"
                         color="0xFFFFFF"
                         fontSize="13"
                         fontWeight="bold"
                         text="Start Date"/>
            </s:Group>
            <mx:Spacer width="100%"/>
            <s:Group>
                <s:BorderContainer width="178" height="77"
                                   backgroundColor="{getStyle('chromeColor')}"
                                   cornerRadius="10">
                    <!-- backgroundColor="{getStyle('playbackViewStopColor')}" -->
                    <s:borderStroke>
                        <s:SolidColorStroke color="0xFFFFFF" weight="2"/>
                    </s:borderStroke>
                    <esri_stl:DateTimeChooser id="dtcEnd"
                                              left="10" top="10"
                                              dateRange="{_presenter.dateRange}"
                                              dateTimeChange="_presenter.dtcEnd_DateTimeChangedHandler(event)"
                                              direction="vertical"
                                              enabled="{!_presenter.timeSliderIsPlaying}"
                                              is24Hour="false"
                                              selectedDateTime="{_presenter.endDateTime}"
                                              showTime="true"/>
                </s:BorderContainer>
                <s:Line width="{endlbl.width}" left="10">
                    <s:stroke>
                        <s:SolidColorStroke color="{getStyle('chromeColor')}" weight="3"/>
                        <!-- color="{getStyle('playbackViewStopColor')}"  -->
                    </s:stroke>
                </s:Line>
                <s:Label id="endlbl"
                         left="12" top="-5"
                         color="0xFFFFFF"
                         fontSize="13"
                         fontWeight="bold"
                         text="End Date"/>
            </s:Group>
        </s:HGroup>
        <!-- thumbMovingRate="{playbackRateStepper.value}"
        thumbCount="2"
        thumbIndexes="{_presenter.timeSliderThumbIndexes}"-->
        <esri:TimeSlider id="timeSlider"
                         width="100%"
                         click="{_presenter.timeSliderIsPlaying ? _presenter.timeSliderIsPlaying = false : _presenter.timeSliderIsPlaying = true}"
                         enabled="{_presenter.timeSliderIsEnabled}"
                         loop="true"
                         skinClass="com.esri.stl.ags.skins.TrackingTimeSlider"
                         timeExtentChange="_presenter.timeSlider_timeExtentChangeHandler(event)"/>
        <!--<s:HGroup verticalAlign="middle">
        <s:Label text="Playback rate:" color="0xFFFFFF" fontWeight="bold"/>
        <s:NumericStepper id="playbackRateStepper" minimum="100" maximum="1000" stepSize="100" value="600"/>
        </s:HGroup>-->
    </s:VGroup>

</s:Group>
