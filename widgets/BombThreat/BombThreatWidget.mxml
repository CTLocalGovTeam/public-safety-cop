<?xml version="1.0" encoding="utf-8"?>
<!--
 | Version 10.1.1
 | Copyright 2012 Esri
 |
 | Licensed under the Apache License, Version 2.0 (the "License");
 | you may not use this file except in compliance with the License.
 | You may obtain a copy of the License at
 |
 |    http://www.apache.org/licenses/LICENSE-2.0
 |
 | Unless required by applicable law or agreed to in writing, software
 | distributed under the License is distributed on an "AS IS" BASIS,
 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 | See the License for the specific language governing permissions and
 | limitations under the License.
-->
<viewer:BaseWidget xmlns:fx="http://ns.adobe.com/mxml/2009"
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:viewer="com.esri.viewer.*"
				   x="600" y="400"
				   widgetConfigLoaded="init()" creationComplete="creationCompleteHandler(event)">


	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/halo";
		@namespace esri "http://www.esri.com/2008/ags";
		@namespace viewer "com.esri.viewer.*";
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/halo";


	</fx:Style>
	<fx:Script>
		<![CDATA[
			import com.esri.ags.Graphic;
			import com.esri.ags.events.GraphicEvent;
			import com.esri.ags.events.GraphicsLayerEvent;
			import com.esri.ags.events.MapEvent;
			import com.esri.ags.events.MapMouseEvent;
			import com.esri.ags.geometry.Extent;
			import com.esri.ags.geometry.Geometry;
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.geometry.Polygon;
			import com.esri.ags.layers.FeatureLayer;
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.symbols.PictureMarkerSymbol;
			import com.esri.ags.symbols.SimpleFillSymbol;
			import com.esri.ags.tasks.FindTask;
			import com.esri.ags.tasks.GeometryService;
			import com.esri.ags.tasks.QueryTask;
			import com.esri.ags.tasks.supportClasses.BufferParameters;
			import com.esri.ags.tasks.supportClasses.Query;
			import com.esri.viewer.AppEvent;
			import com.esri.viewer.IInfowindowTemplate;
			import com.esri.viewer.ViewerContainer;
			import com.esri.viewer.WidgetStates;
			import com.esri.viewer.managers.WidgetManager;

			import flashx.textLayout.elements.ListItemElement;
			import flashx.textLayout.tlf_internal;

			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.controls.Image;
			import mx.controls.Text;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.rpc.AsyncResponder;
			import mx.rpc.Fault;

			import spark.components.TextArea;
			import spark.events.IndexChangeEvent;

			import widgets.BombThreat.event.COPEvent;
			import widgets.BombThreat.utils.DataParserUtils;


			[Bindable] public var title:String;
			[Bindable] public var bombThreatArr:ArrayList=new ArrayList();

			public var _dataParser:DataParserUtils= DataParserUtils.getInstance();
			private var graphicLayer:GraphicsLayer= new GraphicsLayer();
			private var mGraphicLayer:GraphicsLayer= new GraphicsLayer();
			private var pGraphicLayer:GraphicsLayer= new GraphicsLayer();
			private var itemData:Object;
			private var childCreate:Boolean=false;
			private var isMapClick:Boolean=false;
			private var deSelectItem:Number=0;
			private var extentPoints:Extent=new Extent();
			private var childIndex:int=0;
			private var arrowIndex:int=0;

			private var infoTemplate:IInfowindowTemplate;

			private function init():void
			{
				if (configXML)
				{
					var bombThreatXmlList:XMLList = configXML..type
						title= configXML.title;
					var obj:Object;
					for each (var item:XML in bombThreatXmlList)
					{
						obj=new Object();
						obj.name = item.@name[0];
						obj.icon = "widgets/BombThreat/assets/images/" + item.@icon[0];
						obj.unit=item.@unit[0];
						obj.p_distance =item.@preferredEvacuationDistance[0];
						obj.m_distance =item.@mandatoryEvacuationDistance[0];
						obj.mandDescrip=item.inforpopup.mandatiorydescription.toString()
						obj.preDescrip=item.inforpopup.preferreddecription.toString()
						bombThreatArr.addItem(obj);
					}
					_dataParser.mandatoryBufferColor=configXML.mandatorybuffercolor || '0xFF0000';
					_dataParser.preferrdBufferColor=configXML.prefferedbuffercolor|| '0x0000FF';
					pGraphicLayer.id='pGraphicLayer';
					mGraphicLayer.id='mGraphicLayer';
					graphicLayer.id='graphicLayer'
					map.addLayer(pGraphicLayer);
					map.addLayer(mGraphicLayer);
					map.addLayer(graphicLayer);
					map.addEventListener(MapMouseEvent.MAP_CLICK,onMapClickHandler);
				}
				else
				{
					Alert.show('Config not found');
				}

				var infoUrl:String =  "widgets/InfoTemplates/InfoPopupWidget.swf";
				var data:Object = {
					id: String(this.widgetId),
					url: infoUrl,
					config: null
				};
				AppEvent.dispatch(AppEvent.DATA_CREATE_INFOWIDGET, data, infoReady);
			}

			private function infoReady(event:AppEvent):void
			{
				var id:Number = Number(event.data.id);
				if (id == this.widgetId)
				{
					infoTemplate = event.data.infoWidget;
				}
			}
			private function onMapClickHandler(e:MapMouseEvent):void{
				if(childCreate==true)
				{
					isMapClick=true;
					var gra:Graphic= new Graphic()
				//	(ViewerContainer.getInstance().getElementAt(childIndex)as Image).maintainAspectRatio=true;
					var h:Number=(ViewerContainer.getInstance().getElementAt(childIndex)as Image).height;
					var w:Number=(ViewerContainer.getInstance().getElementAt(childIndex)as Image).width;
					gra.symbol= new PictureMarkerSymbol((ViewerContainer.getInstance().getElementAt(childIndex)as Image).source,w,h);
					gra.geometry=e.mapPoint as Geometry;
					graphicLayer.add(gra);
					drawBuffer(e.mapPoint as Geometry)
					ViewerContainer.getInstance().removeElementAt(childIndex);
					childCreate=false;
					this.stage.removeEventListener(Event.ENTER_FRAME, enableCustomMousePointer);
					Mouse.show();
				}

			}

			private function creationCompleteHandler(event:FlexEvent):void
			{
				/**
				 * Add listeners
				 */
				//	ViewerContainer.addEventListener(COPEvent.DROP_THE_IMAGE,enableCustomMousePointer);
				AppEvent.addListener(AppEvent.WIDGET_STATE_CHANGED, widgetStateChangedHandler);
			}


			private function enableCustomMousePointer(e:COPEvent):void
			{


				if(childCreate==true && deSelectItem==1 )
				{

					this.stage.removeEventListener(Event.ENTER_FRAME, onEnterFrame);
					ViewerContainer.getInstance().removeElementAt(childIndex);
					deSelectItem=0;
					childCreate=false;
					//lst.selectedIndex=-1;
					childIndex=0;
				}
				else
					deSelectItem++;


			}

			private function onEnterFrame(event:Event):void
			{
				//trace(stage.width.toString()+'x:y'+stage.height.toString());
				//trace(stage.height-280 +':'+ stage.mouseY-250);

				if(childCreate==true)
				{
					(ViewerContainer.getInstance().getElementAt(childIndex)as Image).visible=true
					if(stage.mouseX < stage.width-280)
					{
						(ViewerContainer.getInstance().getElementAt(childIndex)as Image).x = stage.mouseX;
					}
					else
						(ViewerContainer.getInstance().getElementAt(childIndex)as Image).visible=false

					if(stage.mouseY < stage.height-270 && stage.mouseY > 50)
					{
						//Mouse.show()
						(ViewerContainer.getInstance().getElementAt(childIndex)as Image).y= stage.mouseY;
					}
					else
						(ViewerContainer.getInstance().getElementAt(childIndex)as Image).visible=false
				}
			}



			private function drawBuffer(geometry:Geometry):void
			{
				var geometryService:GeometryService= new GeometryService();
				var manadatoryBufferParam:BufferParameters= new BufferParameters();
				var preferredBufferParam:BufferParameters= new BufferParameters();
				var m_token:Object=new Object();
				var p_token:Object=new Object();
				geometryService.url= configData.geometryService.url;
				manadatoryBufferParam.distances=[itemData.m_distance];
				manadatoryBufferParam.geometries= [geometry];
				manadatoryBufferParam.unit= GeometryService.UNIT_METER
				manadatoryBufferParam.bufferSpatialReference= map.spatialReference;
				manadatoryBufferParam.outSpatialReference= map.spatialReference;

				preferredBufferParam.distances=[itemData.p_distance];
				preferredBufferParam.geometries=[geometry];
				preferredBufferParam.unit=GeometryService.UNIT_METER;
				preferredBufferParam.bufferSpatialReference= map.spatialReference;
				preferredBufferParam.outSpatialReference= map.spatialReference;

				m_token.tokenName='mandatoryBuffer';
				p_token.tokenName='preferredBuffer';
				geometryService.buffer(manadatoryBufferParam,new AsyncResponder(onManadatoryBufferComplete,onFault1,m_token));
				geometryService.buffer(preferredBufferParam,new AsyncResponder(onPreferredBufferComplete,onFault,p_token));
			}

			private function onManadatoryBufferComplete(result:Object, token:Object = null):void
			{
				map.getLayer('mGraphicLayer').visible=true;
				var m_gra:Graphic= new Graphic()
				var sfs:SimpleFillSymbol = new SimpleFillSymbol();
				sfs.color = Number('0x'+_dataParser.mandatoryBufferColor) ;
				sfs.alpha = 0.5;
				m_gra.symbol=sfs;//new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CIRCLE,15,0xFF0000,1);
				m_gra.geometry=result[0] as Polygon;
				//m_gra.toolTip="Mandatory Evacuation Buffer";
				m_gra.addEventListener(MouseEvent.CLICK,onmandBufferClick)
				mGraphicLayer.add(m_gra);
				if(extentPoints.xmax==0 && extentPoints.ymax==0 && extentPoints.xmin==0 && extentPoints.ymin==0)
					extentPoints=	result[0].extent as Extent
				else
					extentPoints=extentPoints.union(result[0].extent as Extent);

				//zoomToBuffer();

			}

			private function onPreferredBufferComplete(result:Object, token:Object = null):void
			{
				pGraphicLayer.clear();
				var p_gra:Graphic= new Graphic()
				var sfs:SimpleFillSymbol = new SimpleFillSymbol();
				sfs.color = Number('0x'+_dataParser.preferrdBufferColor);
				sfs.alpha = 0.5;
				p_gra.symbol= sfs ;//new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CIRCLE,15,0x0000FF,1);
				p_gra.geometry=result[0] as Polygon;
				p_gra.addEventListener(MouseEvent.CLICK,onpreBufferClick)
				if(extentPoints.xmax==0 && extentPoints.ymax==0 && extentPoints.xmin==0 && extentPoints.ymin==0)
					extentPoints=result[0].extent as Extent;
				else
					extentPoints=extentPoints.union(result[0].extent as Extent);

				pGraphicLayer.add(p_gra);
				//map.extent= extentPoints.expand(0.5)
				zoomToBuffer();

			}

			private function onmandBufferClick(e:MouseEvent):void{

				var mappoint:MapPoint= map.toMapFromStage(e.stageX,e.stageY)
				showHighlight(mappoint,'Mandatory buffer',itemData.mandDescrip);
			}
			private function onpreBufferClick(e:MouseEvent):void{
			     var mappoint:MapPoint= map.toMapFromStage(e.stageX,e.stageY)
				showHighlight(mappoint,'Preferred buffer',itemData.preDescrip);
			}

			private function showHighlight(pt:MapPoint,title:String,descrip:String):void
			{
				if (itemData)
				{

					var text:Text= new Text();
					text.width=500;
					text.htmlText=descrip;

					//map.infoWindow.content = text;
					var infoData:Object =new Object();

					infoData.content=descrip;
					infoTemplate.data = infoData;
					map.infoWindow.content = infoTemplate as UIComponent;
					map.infoWindow.closeButton.toolTip = "Close";
					map.infoWindow.label = title;
					map.infoWindow.labelVisible=true;
					map.infoWindow.show(pt);

				}
				else
				{
					map.infoWindow.hide();
				}
			}
			private function onFault(e:Fault, token:Object = null):void
			{
				//trace('fault":'+token.tokenName);
			}
			private function onFault1(e:Fault, token:Object = null):void
			{
				//trace('fault":'+token.tokenName);
			}
			private function clearBufferLayer():void
			{
				mGraphicLayer.clear();
				pGraphicLayer.clear();
				graphicLayer.clear();
				extentPoints= new Extent();
				if(childCreate==true )
				{
					ViewerContainer.getInstance().removeElementAt(1);
				}
			}

			private function list1_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub

			}

			private function zoomToBuffer():void
			{

				var distance:Number = 1000;
				if (distance > 0)
				{
					var x1:Number = extentPoints.xmin - distance;
					var y1:Number = extentPoints.ymin - distance;
					var x2:Number = extentPoints.xmax + distance;
					var y2:Number = extentPoints.ymax + distance;
					map.extent = new Extent(x1,y1,x2,y2);
				}
				else
				{
					map.centerAt(extentPoints as MapPoint);
				}
			}


			/**
			 * On Item click create mouse pointer
			 * request for creating buffer
			 */


			private function list2_changeHandler(event:ListEvent):void
			{
				map.infoWindow.hide();
				if(childCreate==true)
				{
					graphicLayer.clear();
					isMapClick=false;
					childCreate=false;

					if((ViewerContainer.getInstance().getElementAt(childIndex) as Image).source != lst.selectedItem.icon )
					{
						ViewerContainer.getInstance().removeElementAt(childIndex);
						childIndex=0;
						addPointer();
					}
					else
					{
						ViewerContainer.getInstance().removeElementAt(childIndex);
						childIndex=0;
					}



				}
				else
				{

					addPointer();
				}

				var newDataObj:ArrayCollection= new ArrayCollection();
				var obj:Object= new Object();
				obj.childCreated=childCreate;
				obj.childIndex=childIndex;
				newDataObj.addItem(obj);
				addSharedData('BombthreatPointer',newDataObj);
			}

			private function addPointer():void{

				//Clear all Bufeer layer
				clearBufferLayer();

				var tempCursorSymbol:Image= new Image();
				itemData= new Object();
				itemData=lst.selectedItem;
				tempCursorSymbol.maintainAspectRatio=true;
				tempCursorSymbol.source=  lst.selectedItem.icon;

				tempCursorSymbol.id="pointer";
				childCreate=true;
				var arrowCursorSymbol:Image= new Image();
				arrowCursorSymbol.source="assets/images/arrow.png"
				ViewerContainer.getInstance().addElement(tempCursorSymbol)

				childIndex=ViewerContainer.getInstance().numElements-1;
				this.stage.addEventListener(Event.ENTER_FRAME, onEnterFrame);
			}

			/**
			 * On Widget Close clear all graphic layers.
			 */
			private function wTemplate_closedHandler(event:Event):void
			{
				if(childCreate==true && (ViewerContainer.getInstance().getElementAt(childIndex)as Image).source == lst.selectedItem.icon)
				{

					lst.selectedIndex=-1;

					ViewerContainer.getInstance().removeElementAt(childIndex);
					graphicLayer.clear();
					isMapClick=false;
					childCreate=false;
				}

				map.getLayer('pGraphicLayer').visible=false;
				map.getLayer('mGraphicLayer').visible=false;
				map.getLayer('graphicLayer').visible=false;
				map.infoWindow.hide();
			}

			private function wTemplate_openHandler(event:Event):void
			{
				// TODO Auto-generated method stub
				if(map.getLayer('pGraphicLayer')!=null)
				{
					map.getLayer('pGraphicLayer').visible=true;
					map.getLayer('mGraphicLayer').visible=true;
					map.getLayer('graphicLayer').visible=true;

				}


			}


			private function widgetStateChangedHandler(event:AppEvent):void
			{
				var data:Object = event.data;
				//widgetItemArrCol = getWidgetItems(configData.widgets);
				if (data.id as Number != this.widgetId)
				{
					if((data.state as String == WidgetStates.WIDGET_OPENED))
					{
						if(childCreate==true && (ViewerContainer.getInstance().getElementAt(childIndex)as Image).source == lst.selectedItem.icon)
						{

							lst.selectedIndex=-1;

							ViewerContainer.getInstance().removeElementAt(childIndex);
							graphicLayer.clear();
							isMapClick=false;
							childCreate=false;
						}
					}

				}



			}
		]]>
	</fx:Script>
	<viewer:WidgetTemplate id="wTemplate" width="350" minHeight="370" minWidth="350" height="370" closed="wTemplate_closedHandler(event)" open="wTemplate_openHandler(event)">
		<viewer:layout>
			<s:VerticalLayout gap="8" paddingTop="4"/>
		</viewer:layout>
		<s:Label text="{title}"/>
		<s:Group width="100%" height="100%">
			<s:Scroller height="100%"   width="100%">
				<s:Group minHeight="300">

					<mx:List id="lst"  width="100%" height="100%"  selectionColor="#000000"
							 itemClick="list2_changeHandler(event)"
							 dataProvider="{bombThreatArr}"
							 itemRenderer="widgets.BombThreat.renderer.ListbaseRenderer">
					</mx:List>
				</s:Group>

			</s:Scroller>
		</s:Group>
	</viewer:WidgetTemplate>
</viewer:BaseWidget>
