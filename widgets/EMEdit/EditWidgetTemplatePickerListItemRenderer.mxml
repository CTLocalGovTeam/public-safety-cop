<?xml version="1.0" encoding="utf-8"?>
<!--
 | Version 10.2
 | Copyright 2010 Esri
 |
 | Licensed under the Apache License, Version 2.0 (the "License");
 | you may not use this file except in compliance with the License.
 | You may obtain a copy of the License at
 |
 |    http://www.apache.org/licenses/LICENSE-2.0
 |
 | Unless required by applicable law or agreed to in writing, software
 | distributed under the License is distributed on an "AS IS" BASIS,
 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 | See the License for the specific language governing permissions and
 | limitations under the License.
-->
<!---
     @private
     Custom item renderer for custom TemplatePicker skin.
-->
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
                xmlns:s="library://ns.adobe.com/flex/spark"
                xmlns:mx="library://ns.adobe.com/flex/mx"
                name="EditWidgetTemplatePickerListItemRenderer"
                width="100%" height="38"
                focusEnabled="false"
                mouseChildren="false">

    <s:states>
        <s:State name="normal"/>
        <s:State name="hovered"/>
        <s:State name="selected"/>
    </s:states>

    <fx:Script>
        <![CDATA[
            import com.esri.ags.symbols.Symbol;

            import flashx.textLayout.formats.TextAlign;

            import mx.core.IVisualElement;

            override public function set data(value:Object):void
            {
                super.data = value;

                //First remove everything from the contentGroup
                contentGroup.removeAllElements();

                // set style on the label
                templateLabel.setStyle("textAlign", TextAlign.CENTER);

                var drawingToolShape:String;
                if (value.featureTemplate)
                {
                    templateLabel.text = value.featureTemplate.name;
                    toolTip = (value.featureTemplate.description != "") ? value.featureTemplate.name + ": " + value.featureTemplate.description : value.featureTemplate.name;
                    drawingToolShape = value.featureTemplate.drawingTool; // show the swatch which matches the drawing tool shape
                }
                var symbol:Symbol = value.symbol;
                if (symbol)
                {
                    contentGroup.addElement(IVisualElement(symbol.createSwatch(contentGroup.width, contentGroup.height, drawingToolShape)));
                }
                else
                {
                    enabled = false;
                }
            }
        ]]>
    </fx:Script>

    <!-- border/background rectangle -->
    <s:Rect left="0" right="0" top="0" bottom="0">
        <s:stroke>
            <s:SolidColorStroke alpha.normal="0"
                                color.hovered="{getStyle('rollOverColor')}"
                                color.normal="{getStyle('contentBackgroundColor')}"
                                color.selected="{getStyle('focusColor')}"/>
        </s:stroke>
    </s:Rect>

    <s:HGroup width="100%" height="100%"
              paddingBottom="3"
              paddingLeft="3"
              paddingRight="3"
              paddingTop="3"
              verticalAlign="middle">
        <s:Group id="contentGroup"
                 width="28" height="28"/>
        <s:Label id="templateLabel"/>
    </s:HGroup>

</s:ItemRenderer>
