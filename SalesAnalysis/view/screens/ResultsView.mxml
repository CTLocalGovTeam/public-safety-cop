<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
// Copyright (c) 2008-2011 Esri
//
// All rights reserved under the copyright laws of the United States
// and applicable international laws, treaties, and conventions.
//
// You may freely redistribute and use this software, with or
// without modification, provided you include the original copyright
// and use restrictions.  See use restrictions in the file:
// License.txt and/or use_restrictions.txt.
//
////////////////////////////////////////////////////////////////////////////////
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:esri_stl="com.esri.stl.components.*"
		 width="100%" height="100%"
		 currentState="{_presenter.currentState}"
		 preinitialize="preinitializeHandler(event)">
	<!-- BINDING METADATA -->
	<fx:Binding source="resultsDataGrid.selectedItem" destination="_presenter.selectedItem"/>
	<fx:Binding source="resultsDataGrid.selectedIndex" destination="_presenter.selectedIndex"/>
	<s:states>
		<s:State name="mainState"/>
		<s:State name="mainWithMessageState"/>
		<s:State name="mainWithErrorState"/>
	</s:states>
	<s:layout>
		<s:VerticalLayout gap="5"/>
	</s:layout>
	<fx:Script>
		<![CDATA[
			import com.esri.stl.AssetManager;

			import mx.binding.utils.ChangeWatcher;
			import mx.events.FlexEvent;

			import widgets.SalesAnalysis.model.AppModel;
			import widgets.SalesAnalysis.presenter.ResultsPresenter;


			[Bindable]
			private var _presenter:ResultsPresenter;
			private var _watcher:ChangeWatcher;

			protected function preinitializeHandler(event:FlexEvent):void
			{
				_presenter = AppModel.getInstance().resultsPresenter;
			}

			protected function creationCompleteHandler(event:FlexEvent):void
			{
				_watcher = ChangeWatcher.watch(resultsDataGrid, "selectedIndex", selectedIndexChangedHandler);
				_presenter.createDataGridColumns();
			}
			protected function selectedIndexChangedHandler(event:Event):void
			{
				var scrollPosChanged:Boolean;
				if(_presenter.selectedIndex != -1)
				{
					//validateNow();
					scrollPosChanged = resultsDataGrid.scrollToIndex(_presenter.selectedIndex);
				}
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<!-- VISUAL FEEDBACK FOR MESSAGES AND ERRORS -->
	<s:Label includeIn="mainWithErrorState" text="{_presenter.errorMessage}" width="100%" fontWeight="bold" color="0xFF0000"/>
	<s:HGroup id="message" width="100%" includeIn="mainWithMessageState" >
		<mx:Image source="{AssetManager.ASSET_PROGRESS_LOADER}"/>
		<s:Label text="{_presenter.message}" width="90%" fontWeight="bold"/>
	</s:HGroup>

	<s:Label text="Records matching your search: {_presenter.resultsCount}" />

	<mx:DataGrid id="resultsDataGrid" width="99%" height="80%"
				 fontFamily="{getStyle('fontFamily')}"
				 color="{getStyle('color')}"
				 selectionColor="{getStyle('tableSelectedColor')}"
				 textSelectedColor="{getStyle('tableSelectedTextColor')}"
				 rollOverColor="{getStyle('tableRollOverColor')}"
				 textRollOverColor="{getStyle('tableRollOverTextColor')}"
				 alternatingItemColors="{[getStyle('textColor'),getStyle('chromeColor')]}"
				 dataProvider="{_presenter.dataProvider}"
				 columns="{_presenter.dataGridColumns}"
				 headerRelease="{_presenter.headerReleaseEventHandler(event)}"
				 selectedItem="{_presenter.selectedItem}"
				 selectedIndex="{_presenter.selectedIndex}"
				 itemClick="_presenter.resultsDataGrid_itemClickHandler(event)"
				 enabled="{_presenter.enabled}"
				 initialize="creationCompleteHandler(event)"
				 includeIn="mainState,mainWithErrorState,mainWithMessageState"
				 />
	<s:HGroup verticalAlign="middle" width="{resultsDataGrid.width}"
			  includeIn="mainState,mainWithErrorState,mainWithMessageState">
		<esri_stl:IconButton id="clearResultsButton"
							 source="{AssetManager.I_SEARCH_GRAY_20w20h}" label="{_presenter.backButtonLabel}"
							 chromeColor="{getStyle('btnPreviousColor')}"
							 color="{getStyle('btnFontColor')}"
							 click="_presenter.clearResultsButton_clickHandler(event)" toolTip="{_presenter.backButtonToolTip}"/>
		<mx:Spacer width="100%"/>
		<esri_stl:IconButton id="showSalesChart"
							 source="{AssetManager.I_CHART_20w20h}" label="{_presenter.chartButtonLabel}"
							 chromeColor="{getStyle('btnNextColor')}"
							 color="{getStyle('btnFontColor')}"
							 enabled="{_presenter.enabled}"
							 click="_presenter.showSalesChart_clickHandler(event)" toolTip="{_presenter.chartButtonToolTip}"
							 />
		<mx:Spacer width="100%"/>
		<esri_stl:IconButton id="exportResults"
							 source="{AssetManager.I_EXCEL_20w20h}" label="{_presenter.exportButtonLabel}"
							 chromeColor="{getStyle('btnGoColor')}"
							 color="{getStyle('btnFontColor')}"
							 enabled="{_presenter.enabled}"
							 click="_presenter.exportResults_clickHandler(event)" toolTip="{_presenter.exportButtonToolTip}"
							 />
	</s:HGroup>
</s:Group>
